#include "../Structs.hlsl"
#include "UnityCG.cginc"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

cbuffer CB
{
	float _TotalCount;
	float4x4 _UNITY_MATRIX_VP;
	Texture2D<float4> _HiZMap;
	SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
	float _HizTextureSize;
	float _LODCount;
}

StructuredBuffer<AABB> _InstanceAABBBuffer;
StructuredBuffer<IndirectArgument> _InstanceArgumentBuffer;
RWStructuredBuffer<IndirectArgument> _CullingResult;
RWStructuredBuffer<uint> _CountBuffer;

inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
	return (clipPos.z > 1
		|| clipPos.x < -1
		|| clipPos.x > 1
		|| clipPos.y < -1
		|| clipPos.y > 1)
		? 0 : 1;
}

static const float3 corners[8] =
{
	float3(1, 1, 1),
	float3(1, 1, -1),
	float3(1, -1, 1),
	float3(1, -1, -1),
	float3(-1, 1, 1),
	float3(-1, 1, -1),
	float3(-1, -1, 1),
	float3(-1, -1, -1)
};

// Hi-Z Culling
inline uint OcculsionTest(AABB aabb)
{
#ifdef UNITY_REVERSED_Z
	float minZ = 0;
#else
	float minZ = 1;
#endif
	float2 maxXY = 0; float2 minXY = 1;
	for (uint i = 0; i < 8; ++i)
	{
		float3 boxCorner = aabb.center + aabb.extent * corners[i];
		float4 clipPos = mul(_UNITY_MATRIX_VP, float4(boxCorner, 1));
		clipPos /= clipPos.w;
		minXY = min(clipPos.xy, minXY);
		maxXY = max(clipPos.xy, maxXY);
#ifdef UNITY_REVERSED_Z
		minZ = max(minZ, clipPos.z);
#else
		minZ = min(minZ, clipPos.z);
#endif
	}
	float4 boxUVs = float4(minXY, maxXY);
	boxUVs = saturate(boxUVs * 0.5 + 0.5);
	float2 size = (boxUVs.zw - boxUVs.xy) * _HizTextureSize.xx;
	float mip = (log2(max(size.x, size.y)));
	if (mip > _LODCount)
	{
		return 1;
	}
	mip = ceil(mip);
	mip = min(mip, _LODCount);
	float  level_lower = max(mip - 1, 0);
	float2 scale = exp2(-level_lower) * _HizTextureSize.xx;
	float2 a = floor(boxUVs.xy * scale);
	float2 b = ceil(boxUVs.zw * scale);
	float2 dims = b - a;

	// Use the lower level if we only touch <= 2 texels in both dimensions
	if (dims.x <= 2 && dims.y <= 2)
		mip = level_lower;

	float4 depth = float4(_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.xy, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.zy, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.xw, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.zw, mip).r
		);
#ifdef UNITY_REVERSED_Z
	depth.xy = min(depth.xy, depth.zw);
	depth.x = min(depth.x, depth.y);
	return minZ >= depth.x;
#else
	depth.xy = max(depth.xy, depth.zw);
	depth.x = max(depth.x, depth.y);
	return minZ <= depth.x;
#endif
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint tID = id.x;
	if (tID >= _TotalCount) return;

	// Get the instance data
	AABB instance_AABB = _InstanceAABBBuffer[tID];
	IndirectArgument instance_argument = _InstanceArgumentBuffer[tID];

	// Check if the instance is visible
	float3 pos = instance_AABB.center;
	float3 extent = instance_AABB.extent;

	uint isVisible = 1;

	uint isInFrustum = 0;
	[unroll]
	for (int i = 0; i < 8; i++)
	{
		float4 clipPos = mul(_UNITY_MATRIX_VP, float4(pos + extent * corners[i], 1));
		clipPos.xyz = clipPos.xyz / clipPos.w;
		// For Frustum
		isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPos));
	}
	isVisible *= isInFrustum;

	isVisible *= isVisible > 0 ? OcculsionTest(instance_AABB) : 0;

	// Output
	[branch]
	if (isVisible > 0.5)
	{
		uint index;
		InterlockedAdd(_CountBuffer[0], 1, index);
		_CullingResult[index] = instance_argument;
	}
	
}
